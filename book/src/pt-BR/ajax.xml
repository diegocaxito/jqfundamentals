<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Ajax</title>

  <section>
    <title>Introdução</title>

    <para>O método XMLHttpRequest permite que navegadores comuniquem com o
    servidor sem precisar um reload na página. Este método, também conhecido
    como Ajax(Asynchronous JavaScript and XML - JavaScript Assíncrono e XML),
    permite ter experiências ricas e interativas nas páginas web.</para>

    <para>Requisições Ajax são disparadas por código JavaScript; seu código 
    envia uma requisição a uma URL, e quando recebe uma resposta, uma função
    callback pode ser acionada para lidar com a resposta. Pelo motivo da requisição
    ser assíncrona, o resto do seu código continua a executar enquanto a requisição
    estiver sendo processada, então é imperativo que um callback seja usado para
    lidar com a resposta.</para>

    <para>O jQuery provê suporte Ajax que abstrai as dolorosas diferenças entre
    navegadores. Ele oferece métodos completos como o <code>$.ajax()</code>,
    e alguns métodos de conveniência como <code>$.get()</code>,
    <code>$.getScript()</code>, <code>$.getJSON()</code>,
    <code>$.post()</code> e <code>$().load()</code>.</para>

    <para>A maior parte das aplicações jQuery não usam XML apesar do nome
    "Ajax"; ao invés disso, elas transportam HTML puro ou JSON (JavaScript
    Object Notation - Notação de Objeto do JavaScript).</para>

    <para>Em geral, Ajax não funciona através de domínios diferentes. 
    As exceções são serviços que fornecem suporte ao JSONP (JSON com
    padding), que permite uma limitada funcionalidade cross-domínio.</para>
  </section>

  <section>
    <title>Conceitos Chave</title>

    <para>O uso apropriado de métodos relacionados ao Ajax requer alguns
    conceitos-chave primeiro</para>

    <section>
      <title>GET vs. POST</title>

      <para>Os métodos mais comuns para enviar uma requisição ao servidor são
      o GET e o POST. É importante entender a aplicação apropriada para cada um.</para>

      <para>O método GET deve ser usado para operações não-destrutivas -
      ou seja, operações que você apenas esteja "pegando" dados do servidor,
      sem modificar nenhum dado no servidor. Por exemplo, uma consulta para
      fazer uma busca pode ser uma requisição GET. Requisições GET podem ser
      cacheadas pelo navegador, que pode levar a comportamentos imprevisíveis
      se você não tomar cuidado. Requisições GET geralmente enviam todos os 
      seus dados na string de requisição.</para>

      <para>O método POST deve ser usado para operações destrutivas - ou seja,
      operações onde você muda dados no servidor. Por exemplo, um usuário salvando
      o post de um blog deve ser uma requisição POST. Requisições POST geralmente
      não são cacheadas pelo browser; uma string de requisição pode fazer parte da
      URL, mas os dados tendem a ser enviados separadamente como uma requisição 
      POST.</para>
    </section>

    <section>
      <title>Tipos de dados</title>

      <para>O jQuery geralmente requer alguma instrução a respeito do tipo de 
      dados que você espera obter com uma requisição Ajax; em alguns casos, o
      tipo de dados é especificado no nome do método e em outros casos é provido
      como parte do objeto de configuração. Há várias opções:</para>

      <variablelist>
        <varlistentry>
          <term>texto</term>

          <listitem>
            <para>Para transportar strings simples</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>html</term>

          <listitem>
            <para>Para transportar blocos de HTML para serem colocados
            na página</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>script</term>

          <listitem>
            <para>Para adicionar um novo script à página</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>json</term>

          <listitem>
            <para>Para transportar dados formatados no estilo JSON, que pode
            incluir strings, arrays e objetos<note>
                <para>No jQuery 1.4, se os dados JSON enviados pelo seu 
                servidor não estiverem propriamente formatados, a requisição
                pode falhar silenciosamente. Dê uma olhada em
                <link xlink:href="http://json.org">http://json.org</link> para
                detalhes sobre formatação correta do JSON, mas como regra geral,
                use métodos já prontos da linguagem usada no servidor para gerar
                JSON sem erros de sintaxe.</para>
              </note></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>jsonp</term>

          <listitem>
            <para>Para transportar dados JSON de outro domínio.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>xml</term>

          <listitem>
            <para>Para transporte de dados em um XML</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <remark>Eu sou um forte proponente no uso de JSON na maioria dos casos,
      de forma que ele provê a maior flexibilidade. É especialmente útil para
      enviar HTML e dados ao mesmo tempo.</remark>
    </section>

    <section>
      <title>A é de assíncrono</title>

      <para>A assincronicidade do Ajax pega muitos novos usuários do jQuery
      desprevinidos. Pelo fato das chamadas Ajax serem assíncronas por padrão,
      a resposta não estará disponvível imediatamente. Respostas só podem ser
      manipuladas por um callback. Então, por exemplo, o código seguinte não
      irá funcionar:</para>

      <programlisting>$.get('foo.php');
console.log(response);</programlisting>

      <para>Ao invés disso, nós temos que passar um função callback para 
      nossa requisição; Este callback será executado quando a requisição
      for realizada com sucesso, e é neste ponto que poderemos acessar os
      dados que ela retornou, se houver algum. <programlisting>$.get('foo.php', function(response) { console.log(response); });</programlisting></para>
    </section>

    <section>
      <title>Regra da mesma origem e JSONP</title>

      <para>Em geral, as requisições Ajax são limitadas ao mesmo protocolo
       (http ou https), a mesma porta, e ao mesmo domínio da página que
       está fazendo a requisição. Esta limitação não se aplicam a scripts que
       são carregados pelos métodos de Ajax do jQuery.</para>

      <para>A outra exceção são requisições direcionadas a um serviço JSONP
      em outro domínio. No caso do JSONP, o provedor do serviço tem que concordar
      em responder a sua requisição com um script que pode ser carregado dentro
      da mesma página usando uma tag <code>&lt;script&gt;</code>, assim evitando
      a limitação da mesma origem; este script terá os dados que você requisitou
      encapsulado em uma função de callback que você especificou.</para>
    </section>

    <section>
      <title>Ajax and Firebug</title>

      <para>Firebug (or the Webkit Inspector in Chrome or Safari) is an
      invaluable tool for working with Ajax requests. You can see Ajax
      requests as they happen in the Console tab of Firebug (and in the
      Resources &gt; XHR panel of Webkit Inspector), and you can click on a
      request to expand it and see details such as the request headers,
      response headers, response content, and more. If something isn't going
      as expected with an Ajax request, this is the first place to look to
      track down what's wrong.</para>
    </section>
  </section>

  <section>
    <title>jQuery's Ajax-Related Methods</title>

    <para>While jQuery does offer many Ajax-related convenience methods, the
    core <code>$.ajax</code> method is at the heart of all of them, and
    understanding it is imperative. We'll review it first, and then touch
    briefly on the convenience methods.</para>

    <remark>I generally use the $.ajax method and do not use convenience
    methods. As you'll see, it offers features that the convenience methods do
    not, and its syntax is more easily understandable, in my opinion.</remark>

    <section>
      <title>$.ajax</title>

      <para>jQuery’s core <code>$.ajax</code> method is a powerful and
      straightforward way of creating Ajax requests. It takes a configuration
      object that contains all the instructions jQuery requires to complete
      the request. The <code>$.ajax</code> method is particularly valuable
      because it offers the ability to specify both success and failure
      callbacks. Also, its ability to take a configuration object that can be
      defined separately makes it easier to write reusable code. For complete
      documentation of the configuration options, visit <link
      xlink:href="http://api.jquery.com/jQuery.ajax/">http://api.jquery.com/jQuery.ajax/</link>.</para>

      <example>
        <title>Using the core $.ajax method</title>

        <programlisting>$.ajax({
    // the URL for the request
    url : 'post.php',

    // the data to send 
    // (will be converted to a query string)
    data : { id : 123 },

    // whether this is a POST or GET request
    method : 'GET',

    // the type of data we expect back
    dataType : 'json',

    // code to run if the request succeeds;
    // the response is passed to the function
    success : function(json) {
        $('&lt;h1/&gt;').text(json.title).appendTo('body');
        $('&lt;div class="content"/&gt;')
            .html(json.html).appendTo('body');
    },

    // code to run if the request fails;
    // the raw request and status codes are 
    // passed to the function
    error : function(xhr, status) {
        alert('Sorry, there was a problem!');
    },

    // code to run regardless of success or failure
    complete : function(xhr, status) {
        alert('The request is complete!');
    }
});</programlisting>
      </example>

      <note>
        <para>A note about the <code>dataType</code> setting: if the server
        sends back data that is in a different format than you specify, your
        code may fail, and the reason will not always be clear, because the
        HTTP response code will not show an error. When working with Ajax
        requests, make sure your server is sending back the data type you're
        asking for, and verify that the Content-type header is accurate for
        the data type. For example, for JSON data, the Content-type header
        should be <code>application/json</code>.</para>
      </note>

      <section>
        <title><code>$.ajax</code> Options</title>

        <para>There are many, many options for the $.ajax method, which is
        part of its power. For a complete list of options, visit <link
        xlink:href="http://api.jquery.com/jQuery.ajax/">http://api.jquery.com/jQuery.ajax/</link>;
        here are several that you will use frequently:</para>

        <variablelist>
          <varlistentry>
            <term>async</term>

            <listitem>
              <para>Set to <code>false</code> if the request should be sent
              synchronously. Defaults to <code>true</code>. Note that if you
              set this option to false, your request will block execution of
              other code until the response is received.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>cache</term>

            <listitem>
              <para>Whether to use a cached response if available. Defaults to
              <code>true</code> for all dataTypes except "script" and "jsonp".
              When set to false, the URL will simply have a cachebusting
              parameter appended to it.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>complete</term>

            <listitem>
              <para>A callback function to run when the request is complete,
              regardless of success or failure. The function receives the raw
              request object and the text status of the request.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>context</term>

            <listitem>
              <para>The scope in which the callback function(s) should run
              (i.e. what <code>this</code> will mean inside the callback
              function(s)). By default, <code>this</code> inside the callback
              function(s) refers to the object originally passed to
              <code>$.ajax</code>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>data</term>

            <listitem>
              <para>The data to be sent to the server. This can either be an
              object or a query string, such as
              <code>foo=bar&amp;baz=bim</code>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>dataType</term>

            <listitem>
              <para>The type of data you expect back from the server. By
              default, jQuery will look at the MIME type of the response if no
              dataType is specified.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>error</term>

            <listitem>
              <para>A callback function to run if the request results in an
              error. The function receives the raw request object and the text
              status of the request.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>jsonp</term>

            <listitem>
              <para>The callback name to send in a query string when making a
              JSONP request. Defaults to "callback".</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>success</term>

            <listitem>
              <para>A callback function to run if the request succeeds. The
              function receives the response data (converted to a JavaScript
              object if the dataType was JSON), as well as the text status of
              the request and the raw request object.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>timeout</term>

            <listitem>
              <para>The time in milliseconds to wait before considering the
              request a failure.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>traditional</term>

            <listitem>
              <para>Set to true to use the param serialization style in use
              prior to jQuery 1.4. For details, see <link
              xlink:href="http://api.jquery.com/jQuery.param/">http://api.jquery.com/jQuery.param/</link>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>type</term>

            <listitem>
              <para>The type of the request, "POST" or "GET". Defaults to
              "GET". Other request types, such as "PUT" and "DELETE" can be
              used, but they may not be supported by all browsers.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>url</term>

            <listitem>
              <para>The URL for the request.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>The <code>url</code> option is the only required property of the
        <code>$.ajax</code> configuration object; all other properties are
        optional.</para>
      </section>
    </section>

    <section>
      <title>Convenience Methods</title>

      <para>If you don't need the extensive configurability of
      <code>$.ajax</code>, and you don't care about handling errors, the Ajax
      convenience functions provided by jQuery can be useful, terse ways to
      accomplish Ajax requests. These methods are just "wrappers" around the
      core <code>$.ajax</code> method, and simply pre-set some of the options
      on the <code>$.ajax</code> method.</para>

      <para>The convenience methods provided by jQuery are:</para>

      <variablelist>
        <varlistentry>
          <term>$.get</term>

          <listitem>
            <para>Perform a GET request to the provided URL.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>$.post</term>

          <listitem>
            <para>Perform a POST request to the provided URL.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>$.getScript</term>

          <listitem>
            <para>Add a script to the page.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>$.getJSON</term>

          <listitem>
            <para>Perform a GET request, and expect JSON to be
            returned.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>In each case, the methods take the following arguments, in
      order:</para>

      <variablelist>
        <varlistentry>
          <term>url</term>

          <listitem>
            <para>The URL for the request. Required.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>data</term>

          <listitem>
            <para>The data to be sent to the server. Optional. This can either
            be an object or a query string, such as
            <code>foo=bar&amp;baz=bim</code>.</para>

            <note>
              <para>This option is not valid for
              <code>$.getScript</code>.</para>
            </note>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>success callback</term>

          <listitem>
            <para>A callback function to run if the request succeeds.
            Optional. The function receives the response data (converted to a
            JavaScript object if the data type was JSON), as well as the text
            status of the request and the raw request object.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>data type</term>

          <listitem>
            <para>The type of data you expect back from the server.
            Optional.</para>

            <note>
              <para>This option is only applicable for methods that don't
              already specify the data type in their name.</para>
            </note>
          </listitem>
        </varlistentry>
      </variablelist>

      <example>
        <title>Using jQuery's Ajax convenience methods</title>

        <para><programlisting>// get plain text or html
$.get('/users.php', { userId : 1234 }, function(resp) {
    console.log(resp);
});

// add a script to the page, then run a function defined in it
$.getScript('/static/js/myScript.js', function() {
    functionFromMyScript();
});

// get JSON-formatted data from the server
$.getJSON('/details.php', function(resp) {
    $.each(resp, function(k, v) {
        console.log(k + ' : ' + v);
    });
});</programlisting></para>
      </example>
    </section>

    <section>
      <title><code>$.fn.load</code></title>

      <para>The <code>$.fn.load</code> method is unique among jQuery’s Ajax
      methods in that it is called on a selection. The <code>$.fn.load</code>
      method fetches HTML from a URL, and uses the returned HTML to populate
      the selected element(s). In addition to providing a URL to the method,
      you can optionally provide a selector; jQuery will fetch only the
      matching content from the returned HTML.</para>

      <example>
        <title>Using <code>$.fn.load</code> to populate an element</title>

        <programlisting>$('#newContent').load('/foo.html');</programlisting>
      </example>

      <example>
        <title>Using <code>$.fn.load</code> to populate an element based on a
        selector</title>

        <programlisting>$('#newContent').load('/foo.html <emphasis role="bold">#myDiv h1:first</emphasis>', function(html) {
  alert('Content updated!');
});</programlisting>
      </example>
    </section>
  </section>

  <section>
    <title>Ajax and Forms</title>

    <para>jQuery’s ajax capabilities can be especially useful when dealing
    with forms. The <link xlink:href="http://jquery.malsup.com/form/">jQuery
    Form Plugin</link> is a well-tested tool for adding Ajax capabilities to
    forms, and you should generally use it for handling forms with Ajax rather
    than trying to roll your own solution for anything remotely complex. That
    said, there are a two jQuery methods you should know that relate to form
    processing in jQuery: <code>$.fn.serialize</code> and
    <code>$.fn.serializeArray</code>.</para>

    <example>
      <title>Turning form data into a query string</title>

      <programlisting>$('#myForm').serialize();</programlisting>
    </example>

    <example>
      <title>Creating an array of objects containing form data</title>

      <programlisting>$('#myForm').serializeArray();

// creates a structure like this:
[
    { name : 'field1', value : 123 },
    { name : 'field2', value : 'hello world' }
]</programlisting>
    </example>
  </section>

  <section>
    <title>Working with JSONP</title>

    <para>The advent of JSONP -- essentially a consensual cross-site scripting
    hack -- has opened the door to powerful mashups of content. Many prominent
    sites provide JSONP services, allowing you access to their content via a
    predefined API. A particularly great source of JSONP-formatted data is the
    <link xlink:href="http://developer.yahoo.com/yql/console/">Yahoo! Query
    Language</link>, which we'll use in the following example to fetch news
    about cats.</para>

    <example>
      <title>Using YQL and JSONP</title>

      <programlisting>$.ajax({
    url : 'http://query.yahooapis.com/v1/public/yql',

    // the name of the callback parameter,
    // as specified by the YQL service
    jsonp : 'callback',

    // tell jQuery we're expecting JSONP
    dataType : 'jsonp',

    // tell YQL what we want and that we want JSON
    data : {
        q : 'select title,abstract,url from search.news where query="cat"',
        format : 'json'
    },

    // work with the response
    success : function(response) {
        console.log(response);
    }
});</programlisting>
    </example>

    <para>jQuery handles all the complex aspects of JSONP behind-the-scenes --
    all we have to do is tell jQuery the name of the JSONP callback parameter
    specified by YQL ("callback" in this case), and otherwise the whole
    process looks and feels like a normal Ajax request.</para>
  </section>

  <section>
    <title>Ajax Events</title>

    <para>Often, you’ll want to perform an operation whenever an Ajax requests
    starts or stops, such as showing or hiding a loading indicator. Rather
    than defining this behavior inside every Ajax request, you can bind Ajax
    events to elements just like you'd bind other events. For a complete list
    of Ajax events, visit <link
    xlink:href="http://docs.jquery.com/Ajax_Events">http://docs.jquery.com/Ajax_Events</link>.</para>

    <example>
      <title>Setting up a loading indicator using Ajax Events</title>

      <programlisting>$('#loading_indicator')
    .ajaxStart(function() { $(this).show(); })
    .ajaxStop(function() { $(this).hide(); });</programlisting>
    </example>
  </section>

  <section>
    <title>Exercises</title>

    <xi:include href="exercises/load-external-content.xml"
                xpointer="element(/1)" />

    <xi:include href="exercises/load-json.xml" xpointer="element(/1)" />
  </section>
</chapter>
