<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Ajax</title>

  <section>
    <title>Introdução</title>

    <para>O método XMLHttpRequest permite que navegadores comuniquem com o
    servidor sem precisar um reload na página. Este método, também conhecido
    como Ajax(Asynchronous JavaScript and XML - JavaScript Assíncrono e XML),
    permite ter experiências ricas e interativas nas páginas web.</para>

    <para>Requisições Ajax são disparadas por código JavaScript; seu código 
    envia uma requisição a uma URL, e quando recebe uma resposta, uma função
    callback pode ser acionada para lidar com a resposta. Pelo motivo da requisição
    ser assíncrona, o resto do seu código continua a executar enquanto a requisição
    estiver sendo processada, então é imperativo que um callback seja usado para
    lidar com a resposta.</para>

    <para>O jQuery provê suporte Ajax que abstrai as dolorosas diferenças entre
    navegadores. Ele oferece métodos completos como o <code>$.ajax()</code>,
    e alguns métodos de conveniência como <code>$.get()</code>,
    <code>$.getScript()</code>, <code>$.getJSON()</code>,
    <code>$.post()</code> e <code>$().load()</code>.</para>

    <para>A maior parte das aplicações jQuery não usam XML apesar do nome
    "Ajax"; ao invés disso, elas transportam HTML puro ou JSON (JavaScript
    Object Notation - Notação de Objeto do JavaScript).</para>

    <para>Em geral, Ajax não funciona através de domínios diferentes. 
    As exceções são serviços que fornecem suporte ao JSONP (JSON com
    padding), que permite uma limitada funcionalidade cross-domínio.</para>
  </section>

  <section>
    <title>Conceitos Chave</title>

    <para>O uso apropriado de métodos relacionados ao Ajax requer alguns
    conceitos-chave primeiro</para>

    <section>
      <title>GET vs. POST</title>

      <para>Os métodos mais comuns para enviar uma requisição ao servidor são
      o GET e o POST. É importante entender a aplicação apropriada para cada um.</para>

      <para>O método GET deve ser usado para operações não-destrutivas -
      ou seja, operações que você apenas esteja "pegando" dados do servidor,
      sem modificar nenhum dado no servidor. Por exemplo, uma consulta para
      fazer uma busca pode ser uma requisição GET. Requisições GET podem ser
      cacheadas pelo navegador, que pode levar a comportamentos imprevisíveis
      se você não tomar cuidado. Requisições GET geralmente enviam todos os 
      seus dados na string de requisição.</para>

      <para>O método POST deve ser usado para operações destrutivas - ou seja,
      operações onde você muda dados no servidor. Por exemplo, um usuário salvando
      o post de um blog deve ser uma requisição POST. Requisições POST geralmente
      não são cacheadas pelo browser; uma string de requisição pode fazer parte da
      URL, mas os dados tendem a ser enviados separadamente como uma requisição 
      POST.</para>
    </section>

    <section>
      <title>Tipos de dados</title>

      <para>O jQuery geralmente requer alguma instrução a respeito do tipo de 
      dados que você espera obter com uma requisição Ajax; em alguns casos, o
      tipo de dados é especificado no nome do método e em outros casos é provido
      como parte do objeto de configuração. Há várias opções:</para>

      <variablelist>
        <varlistentry>
          <term>texto</term>

          <listitem>
            <para>Para transportar strings simples</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>html</term>

          <listitem>
            <para>Para transportar blocos de HTML para serem colocados
            na página</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>script</term>

          <listitem>
            <para>Para adicionar um novo script à página</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>json</term>

          <listitem>
            <para>Para transportar dados formatados no estilo JSON, que pode
            incluir strings, arrays e objetos<note>
                <para>No jQuery 1.4, se os dados JSON enviados pelo seu 
                servidor não estiverem propriamente formatados, a requisição
                pode falhar silenciosamente. Dê uma olhada em
                <link xlink:href="http://json.org">http://json.org</link> para
                detalhes sobre formatação correta do JSON, mas como regra geral,
                use métodos já prontos da linguagem usada no servidor para gerar
                JSON sem erros de sintaxe.</para>
              </note></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>jsonp</term>

          <listitem>
            <para>Para transportar dados JSON de outro domínio.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>xml</term>

          <listitem>
            <para>Para transporte de dados em um XML</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <remark>Eu sou um forte proponente no uso de JSON na maioria dos casos,
      de forma que ele provê a maior flexibilidade. É especialmente útil para
      enviar HTML e dados ao mesmo tempo.</remark>
    </section>

    <section>
      <title>A é de assíncrono</title>

      <para>A assincronicidade do Ajax pega muitos novos usuários do jQuery
      desprevinidos. Pelo fato das chamadas Ajax serem assíncronas por padrão,
      a resposta não estará disponvível imediatamente. Respostas só podem ser
      manipuladas por um callback. Então, por exemplo, o código seguinte não
      irá funcionar:</para>

      <programlisting>$.get('foo.php');
console.log(response);</programlisting>

      <para>Ao invés disso, nós temos que passar um função callback para 
      nossa requisição; Este callback será executado quando a requisição
      for realizada com sucesso, e é neste ponto que poderemos acessar os
      dados que ela retornou, se houver algum. <programlisting>$.get('foo.php', function(response) { console.log(response); });</programlisting></para>
    </section>

    <section>
      <title>Regra da mesma origem e JSONP</title>

      <para>Em geral, as requisições Ajax são limitadas ao mesmo protocolo
       (http ou https), a mesma porta, e ao mesmo domínio da página que
       está fazendo a requisição. Esta limitação não se aplicam a scripts que
       são carregados pelos métodos de Ajax do jQuery.</para>

      <para>A outra exceção são requisições direcionadas a um serviço JSONP
      em outro domínio. No caso do JSONP, o provedor do serviço tem que concordar
      em responder a sua requisição com um script que pode ser carregado dentro
      da mesma página usando uma tag <code>&lt;script&gt;</code>, assim evitando
      a limitação da mesma origem; este script terá os dados que você requisitou
      encapsulado em uma função de callback que você especificou.</para>
    </section>

    <section>
      <title>Ajax e o Firebug</title>

      <para>O Firebug (ou o Webkit Inspector no Chrome ou Safari) é uma
      ferramenta indispensável para trabalhar com requisições Aajax. Você
      pode ver as requisições Ajax no mesmo instante que elas acontecem na
      tab Console do Firebug  (e no painel Resources &gt; XHR do Webkit Inspector), 
      e você pode clicar numa requisição para expandi-la e ver os detalhes como
      os headers de requisição, de resposta, conteúdo e mais. Se alguma coisa não
      estiver acontecendo como esperado com uma requisição Ajax, este é o primeiro
      lugar para ver o que está acontecendo de errado.</para>
    </section>
  </section>

  <section>
    <title>Métodos do jQuery relacionados ao Ajax</title>

    <para>Enquanto o jQuery oferece muitos métodos convenientes relacionados
    ao Ajax, o coração de todos eles é o método <code>$.ajax</code> e entende-lo
    é imperativo. Nós vamos revisa-lo primeiro e então dar uma olhada rápida
    nos métodos de conveniência.</para>

    <remark>Eu geralmente uso o método $.ajax e não uso os métodos de conveniência.
    Como você poderá ver, ele fornece recursos que os métodos de conveniência não
    oferecem e sua sintaxe é mais facilmente inteligível, na minha opinião.</remark>

    <section>
      <title>$.ajax</title>

      <para>O método core <code>$.ajax</code> é uma forma simples e poderosa
      de criar requisições Ajax. Ele utiliza um objeto de configuração que 
      contém todas as instruções que o jQuery precisa para completar a requisição. 
      O método <code>$.ajax</code> é particularmente útil porque ele oferece a
      habilidade de especificar callbacks de sucesso e falha. Há também a 
      possibilidade de pegar um objeto de configuração definido separadamente,
      fazendo que seja fácil escrever código reutilizável. Para documentação 
      completa das opções de configuração, visite <link
      xlink:href="http://api.jquery.com/jQuery.ajax/">http://api.jquery.com/jQuery.ajax/</link>.</para>

      <example>
        <title>Usando o método core $.ajax</title>

        <programlisting>$.ajax({
    // a URL para requisição
    url : 'post.php',

    // Os dados a serem enviados 
    // (serão convertidos em uma string de requisição)
    data : { id : 123 },

    // se esta é uma requisição POST ou GET
    method : 'GET',

    // o tipo de dados que nós esperamos
    dataType : 'json',

    // código a ser executado se a requisição
    // for executada com sucesso; a resposta
    // é passada para a função
    success : function(json) {
        $('&lt;h1/&gt;').text(json.title).appendTo('body');
        $('&lt;div class="content"/&gt;')
            .html(json.html).appendTo('body');
    },

    // código a ser executado se a requisição
    // falhar. A requisição bruta e os códigos
    // de statsus são passados para função 
    error : function(xhr, status) {
        alert('Desculpa, aconteceu um problema!');
    },

    // Código a ser executado independetemente
    // do sucesso ou falha
    complete : function(xhr, status) {
        alert('The request is complete!');
    }
});</programlisting>
      </example>

      <note>
        <para>Uma nota a respeito da configuração <code>dataType</code>: se o 
        servicor enviar dados que estão num formato diferente que você especificou,
        seu código poderá falhar, e a razão nem sempre será clara, por que o
        código de resposta HTTP não irá mostrar um erro. Qunado estiver trabalhando
        com requisições Ajax, tenha certeza que o servidor está enviando de volta
        os dados com o formato que você especificou e verifique se o header
        Content-type está de acordo com o tipo de dados. Por exemplo, para dados
        JSON, o header Content-type deve ser <code>application/json</code>.</para>
      </note>

      <section>
        <title>Opções do <code>$.ajax</code></title>

        <para>Há várias, várias opções para o método  $.ajax, que é parte do
        seu poder. Para uma lista completa de opções, visite <link
        xlink:href="http://api.jquery.com/jQuery.ajax/">http://api.jquery.com/jQuery.ajax/</link>;
        aqui vão algumas opções que você irá usar frequentemente:</para>

        <variablelist>
          <varlistentry>
            <term>async</term>

            <listitem>
              <para>Sete para <code>false</code> se a requisição deve ser
              enviada de forma síncrona. O padrão é <code>true</code>. Perceba
              que se você setar esta opção para falso, sua requisição irá 
              bloquear a execução de outro código até que a resposta seja
              recebida.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>cache</term>

            <listitem>
              <para>Usado se resposta disponível for cacheável. O padrão é
              <code>true</code> para todos os tipos de dados, exceto  "script"
              e "jsonp". Quando setado para falso, a URL simplemente terá um 
              parâmetro a mais anexado a ela para evitar o cache.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>complete</term>

            <listitem>
              <para>Uma funcção callback para executar quando a requisição
              estiver completa, independetemente de sucesso ou falha. A função
              recebe o objeto bruto da requisição e o texto de status da mesma.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>context</term>

            <listitem>
              <para>O escopo em que a função callback deve executar 
              (ou seja, o que <code>this</code> irá significar dentro da(s)
              função(ões) callback). Por padrão, <code>this</code> dentro
              das funções callback refere ao objeto originalmente passado
              para <code>$.ajax</code>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>data</term>

            <listitem>
              <para>Os dados a serem enviados para o servidor. Isto pode ser tanto
              um objeto quanto uma string de requisição, como 
              <code>foo=bar&amp;baz=bim</code>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>dataType</term>

            <listitem>
              <para>O tipo de dado que você espera do servidor. Por padrão, o
              jQuery irá olhar o MIME type da resposta se nenhum tipo de dados
              for especificado.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>error</term>

            <listitem>
              <para>Uma função callback para ser executa se a requisição resultar
              em um erro. A função recebe o objeto bruto de requisição e o texto 
              de status da requisição.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>jsonp</term>

            <listitem>
              <para>O nome da função de callback para enviar na string de requisição
              quando estiver fazendo uma requisição JSONP. O padrão é "callback".</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>success</term>

            <listitem>
              <para>Uma função de callback para ser executada se a requisição
              tiver exito. A função recebe os dados de resposta (convertidos
              para um objeto JavaScript se o tipo de dados for JSON), e o texto
              de status da requisição e o objeto bruto da requisição.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>timeout</term>

            <listitem>
              <para>O tempo em milisegundos a se esperar antes de considerar
              que a reqsuisição falhou.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>traditional</term>

            <listitem>
              <para>Sete para true para usar o tipo de serialização param em
              versões anteriores ao jQuery 1.4. Para detalhes, veja: <link
              xlink:href="http://api.jquery.com/jQuery.param/">http://api.jquery.com/jQuery.param/</link>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>type</term>

            <listitem>
              <para>O tipo da requisição, "POST" ou "GET". O padrão é "GET".
              Outros tipos de requisição, como "PUT" e "DELETE" podem ser
              utilizados, mas eles talvez não sejam suportados por todos os
              navegadores.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>url</term>

            <listitem>
              <para>A URL para requisição.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>A opção <code>url</code> é a única propriedade obrigatória
        do objeto de configuração do método <code>$.ajax</code>;todas as
        outras propriedades são opcionais.</para>
      </section>
    </section>

    <section>
      <title>Métodos de conveniência</title>

      <para>Se você não precisa da configuração extensiva do <code>$.ajax</code>, 
      e você não se preocupa sobre manipulação de erros, as funções 
      de conveniêcia providas pelo jQuery podem ser uma forma útil e lapidada
      para executar requisições Ajax. Estes métodos são somente "encapsulamentos"
      em torno do método <code>$.ajax</code>, e simplesmente pré setam algumas
      das opções no método <code>$.ajax</code>.</para>

      <para>Os métodos de conveniência providos pelo jQuery são:</para>

      <variablelist>
        <varlistentry>
          <term>$.get</term>

          <listitem>
            <para>Executa uma requisição GET para a URL informada.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>$.post</term>

          <listitem> 
            <para>Executa uma requisição POST na URL informada.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>$.getScript</term>

          <listitem>
            <para>Adiciona um script à página.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>$.getJSON</term>

          <listitem>
            <para>Executa uma requisição GET com expectativa de retorno
            de um JSON.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Em cada caso, os métodos pegam os seguintes argumentos,
      em ordem:</para>

      <variablelist>
        <varlistentry>
          <term>url</term>

          <listitem>
            <para>A URL para requisição. Obrigatório.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>data</term>

          <listitem>
            <para>Os dados para serem enviados para o servidor.
            Opcional. Pode ser tanto um objeto quanto uma string
            de requisição, como 
            <code>foo=bar&amp;baz=bim</code>.</para>

            <note>
              <para>Esta opção não é válida para 
              <code>$.getScript</code>.</para>
            </note>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>success callback</term>

          <listitem>
            <para>A callback function to run if the request succeeds.
            Optional. The function receives the response data (converted to a
            JavaScript object if the data type was JSON), as well as the text
            status of the request and the raw request object.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>data type</term>

          <listitem>
            <para>The type of data you expect back from the server.
            Optional.</para>

            <note>
              <para>This option is only applicable for methods that don't
              already specify the data type in their name.</para>
            </note>
          </listitem>
        </varlistentry>
      </variablelist>

      <example>
        <title>Using jQuery's Ajax convenience methods</title>

        <para><programlisting>// get plain text or html
$.get('/users.php', { userId : 1234 }, function(resp) {
    console.log(resp);
});

// add a script to the page, then run a function defined in it
$.getScript('/static/js/myScript.js', function() {
    functionFromMyScript();
});

// get JSON-formatted data from the server
$.getJSON('/details.php', function(resp) {
    $.each(resp, function(k, v) {
        console.log(k + ' : ' + v);
    });
});</programlisting></para>
      </example>
    </section>

    <section>
      <title><code>$.fn.load</code></title>

      <para>The <code>$.fn.load</code> method is unique among jQuery’s Ajax
      methods in that it is called on a selection. The <code>$.fn.load</code>
      method fetches HTML from a URL, and uses the returned HTML to populate
      the selected element(s). In addition to providing a URL to the method,
      you can optionally provide a selector; jQuery will fetch only the
      matching content from the returned HTML.</para>

      <example>
        <title>Using <code>$.fn.load</code> to populate an element</title>

        <programlisting>$('#newContent').load('/foo.html');</programlisting>
      </example>

      <example>
        <title>Using <code>$.fn.load</code> to populate an element based on a
        selector</title>

        <programlisting>$('#newContent').load('/foo.html <emphasis role="bold">#myDiv h1:first</emphasis>', function(html) {
  alert('Content updated!');
});</programlisting>
      </example>
    </section>
  </section>

  <section>
    <title>Ajax and Forms</title>

    <para>jQuery’s ajax capabilities can be especially useful when dealing
    with forms. The <link xlink:href="http://jquery.malsup.com/form/">jQuery
    Form Plugin</link> is a well-tested tool for adding Ajax capabilities to
    forms, and you should generally use it for handling forms with Ajax rather
    than trying to roll your own solution for anything remotely complex. That
    said, there are a two jQuery methods you should know that relate to form
    processing in jQuery: <code>$.fn.serialize</code> and
    <code>$.fn.serializeArray</code>.</para>

    <example>
      <title>Turning form data into a query string</title>

      <programlisting>$('#myForm').serialize();</programlisting>
    </example>

    <example>
      <title>Creating an array of objects containing form data</title>

      <programlisting>$('#myForm').serializeArray();

// creates a structure like this:
[
    { name : 'field1', value : 123 },
    { name : 'field2', value : 'hello world' }
]</programlisting>
    </example>
  </section>

  <section>
    <title>Working with JSONP</title>

    <para>The advent of JSONP -- essentially a consensual cross-site scripting
    hack -- has opened the door to powerful mashups of content. Many prominent
    sites provide JSONP services, allowing you access to their content via a
    predefined API. A particularly great source of JSONP-formatted data is the
    <link xlink:href="http://developer.yahoo.com/yql/console/">Yahoo! Query
    Language</link>, which we'll use in the following example to fetch news
    about cats.</para>

    <example>
      <title>Using YQL and JSONP</title>

      <programlisting>$.ajax({
    url : 'http://query.yahooapis.com/v1/public/yql',

    // the name of the callback parameter,
    // as specified by the YQL service
    jsonp : 'callback',

    // tell jQuery we're expecting JSONP
    dataType : 'jsonp',

    // tell YQL what we want and that we want JSON
    data : {
        q : 'select title,abstract,url from search.news where query="cat"',
        format : 'json'
    },

    // work with the response
    success : function(response) {
        console.log(response);
    }
});</programlisting>
    </example>

    <para>jQuery handles all the complex aspects of JSONP behind-the-scenes --
    all we have to do is tell jQuery the name of the JSONP callback parameter
    specified by YQL ("callback" in this case), and otherwise the whole
    process looks and feels like a normal Ajax request.</para>
  </section>

  <section>
    <title>Ajax Events</title>

    <para>Often, you’ll want to perform an operation whenever an Ajax requests
    starts or stops, such as showing or hiding a loading indicator. Rather
    than defining this behavior inside every Ajax request, you can bind Ajax
    events to elements just like you'd bind other events. For a complete list
    of Ajax events, visit <link
    xlink:href="http://docs.jquery.com/Ajax_Events">http://docs.jquery.com/Ajax_Events</link>.</para>

    <example>
      <title>Setting up a loading indicator using Ajax Events</title>

      <programlisting>$('#loading_indicator')
    .ajaxStart(function() { $(this).show(); })
    .ajaxStop(function() { $(this).hide(); });</programlisting>
    </example>
  </section>

  <section>
    <title>Exercises</title>

    <xi:include href="exercises/load-external-content.xml"
                xpointer="element(/1)" />

    <xi:include href="exercises/load-json.xml" xpointer="element(/1)" />
  </section>
</chapter>
