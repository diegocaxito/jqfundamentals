<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Organização de código</title>

  <section>
    <title>Introdução</title>

    <para>Quando você vai além de adicionar simples melhoras no seu website
    com jQuery e começa a desenvolver aplicações client-side mais complexas,
    você precisa considerar como organizar seu código. Neste capítulo, nós
    vamos dar uma olhada em vários padrões para organização de código que 
    você pode usar em sua aplicação com jQuery e explorar o porquê de 
    organização de código ser importante.</para>

    <section>
      <title>Conceitos chave</title>

      <para>Antes de nós entrarmos em padrões para organização de código, é 
      importante entender alguns conceitos que são comuns a todos os padrões
      de organização de código.</para>

      <itemizedlist>
        <listitem>
          <para>Seu código deve ser dividido em unidades de funcionalidades
          - módulos, serviços, etc. Resista à tentação de ter todo o seu 
          código dentro de um block enorme de $(document).ready().</para>
        </listitem>

        <listitem>
          <para>Apesar da natureza centrada em DOM do jQuery, aplicações
          JavaScript não são só sobre o DOM. Lembre-se que nem todas as
          funcionalidades que você precisa - ou deve - usar tem uma representação
          no DOM.</para>
        </listitem>

        <listitem>
          <para>Unidades de funcionalidade devem ser <link
          xlink:href="http://en.wikipedia.org/wiki/Loose_coupling">fracamente
          acopladas</link> — uma unidade de funcionalidade deve existir por 
          si só e comunicação entre unidades deve ser manipulado via um 
          sistema de mensagens como eventos customizados ou pub/sub. Fique
          longe de comunicação direta entre unidades de funcionalidade sempre
          que possível. </para>
        </listitem>

        <listitem>
          <para>Unidades de funcionalidade devem ser divididas em pequenos métodos
          que fazem exatamente uma coisa. Se seus métodos são maiores que algumas
          linhas, você pode considerar a refatoração.</para>
        </listitem>

        <listitem>
          <para>Opções de configuração para suas unidades de funcionalidade
          - URLS, strings, timeouts, etc. - devem ser setadas em propriedades
          ou em um objeto de configuração, não Configuration options for your units of functionality — URLs,
          strings, timeouts, etc. — should be set in properties or a
          configuration object, not disperso através do código.</para>
        </listitem>
      </itemizedlist>

      <para>O conceito de baixo acoplamento pode ser especialmente problemático
      para desenvolvedores fazendo sua primeira imersão em aplicações complexas,
      então tenha isto em mente quando você estiver iniciando.</para>
    </section>
  </section>

  <section>
    <title>Estruturas organizacionais</title>

    <para>Há várias formas</para>

    <section>
      <title>O literal objeto</title>

      <para>Um literal objeto é talvez o modo mais simples para organizar
      seu código. Ele não oferece nenhuma das muitas outras funcionalidades
      fornecidas por outras técnicas, mas é um bom ponto de início para
      discussão.</para>

      <example>
        <title>Um literal objeto</title>

        <programlisting>var minhaFuncionalidade = {
    minhaPropriedade : 'olá',

    meuMetodo : function() {
        console.log(minhaFuncionalidade.minhaPropriedade);
    },

    init : function(configuracoes) {
        minhaFuncionalidade.configuracoes = configuracoes;
    },

    lerConfiguracoes : function() {
        console.log(minhaFuncionalidade.configuracoes);
    }
};

minhaFuncionalidade.minhaPropriedade; // 'olá'
minhaFuncionalidade.meuMetodo(); // loga 'olá'
minhaFuncionalidade.init({ foo : 'bar' });
minhaFuncionalidade.lerConfiguracoes(); // loga { foo : 'bar' }
</programlisting>
      </example>

      <para>O literal objeto acima é simplesmente um objeto associado a uma
      variável. O objeto tem uma propriedade e vários métodos. Todas as propriedades
      e métodos são públicos, então qualquer parte da sua aplicação pode ver
      e chamar métodos no objeto. Enquanto há um método init, não há nada 
      obrigando que ele seja chamado antes do objeto ser funcional. </para>

      <para>Como poderiámos aplicar este padrão no código jQuery? Digamos
      que nós temos este código escrito num estilo tradicional do jQuery:</para>

      <programlisting>// clicando num item de lista carrega algum conteúdo
// usando o ID do item e esconde conteúdo
// nos itens de lista irmãos
$(document).ready(function() {
  $('#myFeature li')
    .append('&lt;div/&gt;')
    .click(function() {
      var $this = $(this);
      var $div = $this.find('div');
      $div.load('foo.php?item=' +
        $this.attr('id'), 
        function() {
          $div.show();
          $this.siblings()
            .find('div').hide();
        }
      );
    });
});
</programlisting>

      <para>If this were the extent of our application, leaving it as-is would
      be fine. On the other hand, if this was a piece of a larger application,
      we'd do well to keep this functionality separate from unrelated
      functionality. We might also want to move the URL out of the code and
      into a configuration area. Finally, we might want to break up the chain
      to make it easier to modify pieces of the functionality later. </para>

      <example>
        <title>Using an object literal for a jQuery feature</title>

        <programlisting>var myFeature = {
    init : function(settings) {
        myFeature.config = {
            $items : $('#myFeature li'),
            $container : $('&lt;div class="container"&gt;&lt;/div&gt;'),
            urlBase : '/foo.php?item='
        };

        // allow overriding the default config
        $.extend(myFeature.config, settings);

        myFeature.setup();        
    },

    setup : function() {
        myFeature.config.$items
            .each(myFeature.createContainer)
            .click(myFeature.showItem);
    },

    createContainer : function() {
        var $i = $(this),
            $c = myFeature.config.$container.clone()
                     .appendTo($i);

        $i.data('container', $c);
    },
    
    buildUrl : function() {
        return myFeature.config.urlBase + 
               myFeature.$currentItem.attr('id');
    },
    
    showItem : function() {
        var myFeature.$currentItem = $(this);
        myFeature.getContent(myFeature.showContent);
    },
    
    getContent : function(callback) {
        var url = myFeature.buildUrl();
        myFeature.$currentItem
            .data('container').load(url, callback);
    },
    
    showContent : function() {
        myFeature.$currentItem
            .data('container').show();
        myFeature.hideContent();
    },
    
    hideContent : function() {
        myFeature.$currentItem.siblings()
            .each(function() { 
                $(this).data('container').hide(); 
            });
    }
};

$(document).ready(myFeature.init);</programlisting>
      </example>

      <para>The first thing you'll notice is that this approach is obviously
      far longer than the original — again, if this were the extent of our
      application, using an object literal would make no sense at all.
      Assuming it's not the extent of our application, though, we've gained
      several things:</para>

      <itemizedlist>
        <listitem>
          <para>We've broken our feature up into tiny methods; in the future,
          if we want to change how content is shown, it's clear where to
          change it. In the original code, this step is much harder to
          locate.</para>
        </listitem>

        <listitem>
          <para>We've moved configuration options out of the body of the code
          and put them in a central location.</para>
        </listitem>

        <listitem>
          <para>We've eliminated the constraints of the chain, making the code
          easier to refactor, remix, and rearrange.</para>
        </listitem>
      </itemizedlist>

      <para>For non-trivial features, object literals are a clear improvement
      over a long stretch of code stuffed in a $(document).ready() block, as
      they get us thinking about the pieces of our functionality. However,
      they aren't a whole lot more advanced than simply having a bunch of
      function declarations inside of that $(document).ready() block. </para>
    </section>

    <section>
      <title>The Module Pattern</title>

      <example>
        <title>The module pattern</title>

        <programlisting>var featureCreator = function() {
    var privateThing = 'secret',
        publicThing = 'not secret',

        changePrivateThing = function() {
            privateThing = 'super secret';
        },

        sayPrivateThing = function() {
            console.log(privateThing);
            changePrivateThing();
        };

    return {
        publicThing : publicThing,
        sayPrivateThing : sayPrivateThing
    }
};

var feature = featureCreator();
feature.publicThing; // 'not secret'
feature.sayPrivateThing(); 
// logs 'secret' and changes the value
// of privateThing</programlisting>
      </example>

      <para>In the example above, we create a function featureCreator that
      returns an object. Inside of the function, we define some variables.
      Because the variables are defined inside of the function, we don't have
      access to them outside of the function unless we put them in the return
      object. This means that no code outside of the function has access to
      the privateThing variable or to the changePrivateThing function.
      However, sayPrivateThing does have access to privateThing and
      changePrivateThing, because both were defined in the same scope as
      sayPrivateThing.</para>

      <para>This pattern is powerful because, as you can gather from the
      variable names, it can give you private variables and functions while
      exposing a limited API consisting of the returned object's properties
      and methods.</para>

      <example>
        <title>Using the module pattern for a jQuery feature</title>

        <programlisting>$(document).ready(function() {
    var myFeature = (function() {
        
        var $items = $('#myFeature li'),
            $container = $('&lt;div class="container"&gt;&lt;/div&gt;'),
            $currentItem,

            urlBase = '/foo.php?item=',
            
            createContainer = function() {
                var $i = $(this),
                    $c = $container.clone().appendTo($i);

                $i.data('container', $c);
            },
            
            buildUrl = function() {
                return urlBase + $currentItem.attr('id');
            },
            
            showItem = function() {
                var $currentItem = $(this);
                getContent(showContent);
            },
            
            showItemByIndex = function(idx) {
                $.proxy(showItem, $items.get(idx));
            },
            
            getContent = function(callback) {
                $currentItem.data('container').load(buildUrl(), callback);
            },
            
            showContent = function() {
                $currentItem.data('container').show();
                hideContent();
            },
            
            hideContent = function() {
                $currentItem.siblings()
                    .each(function() { 
                        $(this).data('container').hide(); 
                });
            };

        config.$items
            .each(createContainer)
            .click(showItem);
            
        return { showItemByIndex : showItemByIndex };
    })();
    
    myFeature.showItemByIndex(0);
});</programlisting>
      </example>
    </section>

    <section>
      <title>Classes and Class-Like Constructs</title>

      <para></para>
    </section>
  </section>
</chapter>
