<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Organização de código</title>

  <section>
    <title>Introdução</title>

    <para>Quando você vai além de adicionar simples melhoras no seu website
    com jQuery e começa a desenvolver aplicações client-side mais complexas,
    você precisa considerar como organizar seu código. Neste capítulo, nós
    vamos dar uma olhada em vários padrões para organização de código que 
    você pode usar em sua aplicação com jQuery e explorar o porquê de 
    organização de código ser importante.</para>

    <section>
      <title>Conceitos chave</title>

      <para>Antes de nós entrarmos em padrões para organização de código, é 
      importante entender alguns conceitos que são comuns a todos os padrões
      de organização de código.</para>

      <itemizedlist>
        <listitem>
          <para>Seu código deve ser dividido em unidades de funcionalidades
          - módulos, serviços, etc. Resista à tentação de ter todo o seu 
          código dentro de um block enorme de $(document).ready().</para>
        </listitem>

        <listitem>
          <para>Apesar da natureza centrada em DOM do jQuery, aplicações
          JavaScript não são só sobre o DOM. Lembre-se que nem todas as
          funcionalidades que você precisa - ou deve - usar tem uma representação
          no DOM.</para>
        </listitem>

        <listitem>
          <para>Unidades de funcionalidade devem ser <link
          xlink:href="http://en.wikipedia.org/wiki/Loose_coupling">fracamente
          acopladas</link> — uma unidade de funcionalidade deve existir por 
          si só e comunicação entre unidades deve ser manipulado via um 
          sistema de mensagens como eventos customizados ou pub/sub. Fique
          longe de comunicação direta entre unidades de funcionalidade sempre
          que possível. </para>
        </listitem>

        <listitem>
          <para>Unidades de funcionalidade devem ser divididas em pequenos métodos
          que fazem exatamente uma coisa. Se seus métodos são maiores que algumas
          linhas, você pode considerar a refatoração.</para>
        </listitem>

        <listitem>
          <para>Opções de configuração para suas unidades de funcionalidade
          - URLS, strings, timeouts, etc. - devem ser setadas em propriedades
          ou em um objeto de configuração, não Configuration options for your units of functionality — URLs,
          strings, timeouts, etc. — should be set in properties or a
          configuration object, not disperso através do código.</para>
        </listitem>
      </itemizedlist>

      <para>O conceito de baixo acoplamento pode ser especialmente problemático
      para desenvolvedores fazendo sua primeira imersão em aplicações complexas,
      então tenha isto em mente quando você estiver iniciando.</para>
    </section>
  </section>

  <section>
    <title>Estruturas organizacionais</title>

    <para>Há várias formas</para>

    <section>
      <title>O literal objeto</title>

      <para>Um literal objeto é talvez o modo mais simples para organizar
      seu código. Ele não oferece nenhuma das muitas outras funcionalidades
      fornecidas por outras técnicas, mas é um bom ponto de início para
      discussão.</para>

      <example>
        <title>Um literal objeto</title>

        <programlisting>var minhaFuncionalidade = {
    minhaPropriedade : 'olá',

    meuMetodo : function() {
        console.log(minhaFuncionalidade.minhaPropriedade);
    },

    init : function(configuracoes) {
        minhaFuncionalidade.configuracoes = configuracoes;
    },

    lerConfiguracoes : function() {
        console.log(minhaFuncionalidade.configuracoes);
    }
};

minhaFuncionalidade.minhaPropriedade; // 'olá'
minhaFuncionalidade.meuMetodo(); // loga 'olá'
minhaFuncionalidade.init({ foo : 'bar' });
minhaFuncionalidade.lerConfiguracoes(); // loga { foo : 'bar' }
</programlisting>
      </example>

      <para>O literal objeto acima é simplesmente um objeto associado a uma
      variável. O objeto tem uma propriedade e vários métodos. Todas as propriedades
      e métodos são públicos, então qualquer parte da sua aplicação pode ver
      e chamar métodos no objeto. Enquanto há um método init, não há nada 
      obrigando que ele seja chamado antes do objeto ser funcional. </para>

      <para>Como poderiámos aplicar este padrão no código jQuery? Digamos
      que nós temos este código escrito num estilo tradicional do jQuery:</para>

      <programlisting>// clicando num item de lista carrega algum conteúdo
// usando o ID do item e esconde conteúdo
// nos itens de lista irmãos
$(document).ready(function() {
  $('#myFeature li')
    .append('&lt;div/&gt;')
    .click(function() {
      var $this = $(this);
      var $div = $this.find('div');
      $div.load('foo.php?item=' +
        $this.attr('id'), 
        function() {
          $div.show();
          $this.siblings()
            .find('div').hide();
        }
      );
    });
});
</programlisting>

      <para>Se isso for extender nossa aplicação, deixar como está pode ser
      legal. Por outro lado, se esse for um pedaço de uma aplicação maior,
      nós temos que manter esta funcionalidade separada da funcionalidade
      não relacionada. Talvez nós ainda queiramos mover a URL pra fora do 
      código e dentro de uma área de configuração. Por último, nós talvez
      precisaremos quebrar o encadeamento de métodos para ficar mais fácil
      modificar pedaços de funcionalidade depois. </para>

      <example>
        <title>Usando um literal de objeto para uma feature do jQuery</title>

        <programlisting>var myFeature = {
    init : function(settings) {
        myFeature.config = {
            $items : $('#myFeature li'),
            $container : $('&lt;div class="container"&gt;&lt;/div&gt;'),
            urlBase : '/foo.php?item='
        };

        // permite a sobreposição da da configuração padrão
        $.extend(myFeature.config, settings);

        myFeature.setup();        
    },

    setup : function() {
        myFeature.config.$items
            .each(myFeature.createContainer)
            .click(myFeature.showItem);
    },

    createContainer : function() {
        var $i = $(this),
            $c = myFeature.config.$container.clone()
                     .appendTo($i);

        $i.data('container', $c);
    },
    
    buildUrl : function() {
        return myFeature.config.urlBase + 
               myFeature.$currentItem.attr('id');
    },
    
    showItem : function() {
        var myFeature.$currentItem = $(this);
        myFeature.getContent(myFeature.showContent);
    },
    
    getContent : function(callback) {
        var url = myFeature.buildUrl();
        myFeature.$currentItem
            .data('container').load(url, callback);
    },
    
    showContent : function() {
        myFeature.$currentItem
            .data('container').show();
        myFeature.hideContent();
    },
    
    hideContent : function() {
        myFeature.$currentItem.siblings()
            .each(function() { 
                $(this).data('container').hide(); 
            });
    }
};

$(document).ready(myFeature.init);</programlisting>
      </example>

      <para>A primeira coisa que você irá perceber é que esta abordagem 
      é obviamente muito maior que a original - novamente, se isso for 
      extender nossa aplicação, o uso do literal objeto não irá fazer 
      sentido algum. Embora assumindo que não vai extender nossa aplicação,
      nós ganhamos várias coisas:</para>

      <itemizedlist>
        <listitem>
          <para>Nós quebramos nossas funcionalidaes em métodos pequenos;
          no futuro, se nós precisarmos mudar como o conteúdo é mostrado,
          é claro onde nós iremos mudar. No código original, este passo é
          muito mais difícil para se localizar.</para>
        </listitem>

        <listitem>
          <para>Nós movemos as as opções de configuração para fora do 
          corpo do código e colocamos em uma localização central.</para>
        </listitem>

        <listitem>
          <para>Nós eliminamos as restrições do encadeamento, fazendo o
          código mais refatorável, modificável e rearranjável.</para>
        </listitem>
      </itemizedlist>

      <para>Para funcionalidades não triviais, literais de objeto são uma 
      clara melhora sobre o longo pedaço de código dentro do bloco 
      $(document).ready(), de forma nos leva a pensar sobre pedaços de 
      funcionalidade. Entretanto, eles não são muito mais avançados do
      que ter um monte de declarações de funções dentro do bloco 
      $(document).ready(). </para>
    </section>

    <section>
      <title>O Module Pattern</title>

      <example>
        <title>The module pattern</title>

        <programlisting>var featureCreator = function() {
    var privateThing = 'secret',
        publicThing = 'not secret',

        changePrivateThing = function() {
            privateThing = 'super secret';
        },

        sayPrivateThing = function() {
            console.log(privateThing);
            changePrivateThing();
        };

    return {
        publicThing : publicThing,
        sayPrivateThing : sayPrivateThing
    }
};

var feature = featureCreator();
feature.publicThing; // 'not secret'
feature.sayPrivateThing(); 
// logs 'secret' and changes the value
// of privateThing</programlisting>
      </example>

      <para>In the example above, we create a function featureCreator that
      returns an object. Inside of the function, we define some variables.
      Because the variables are defined inside of the function, we don't have
      access to them outside of the function unless we put them in the return
      object. This means that no code outside of the function has access to
      the privateThing variable or to the changePrivateThing function.
      However, sayPrivateThing does have access to privateThing and
      changePrivateThing, because both were defined in the same scope as
      sayPrivateThing.</para>

      <para>This pattern is powerful because, as you can gather from the
      variable names, it can give you private variables and functions while
      exposing a limited API consisting of the returned object's properties
      and methods.</para>

      <example>
        <title>Using the module pattern for a jQuery feature</title>

        <programlisting>$(document).ready(function() {
    var myFeature = (function() {
        
        var $items = $('#myFeature li'),
            $container = $('&lt;div class="container"&gt;&lt;/div&gt;'),
            $currentItem,

            urlBase = '/foo.php?item=',
            
            createContainer = function() {
                var $i = $(this),
                    $c = $container.clone().appendTo($i);

                $i.data('container', $c);
            },
            
            buildUrl = function() {
                return urlBase + $currentItem.attr('id');
            },
            
            showItem = function() {
                var $currentItem = $(this);
                getContent(showContent);
            },
            
            showItemByIndex = function(idx) {
                $.proxy(showItem, $items.get(idx));
            },
            
            getContent = function(callback) {
                $currentItem.data('container').load(buildUrl(), callback);
            },
            
            showContent = function() {
                $currentItem.data('container').show();
                hideContent();
            },
            
            hideContent = function() {
                $currentItem.siblings()
                    .each(function() { 
                        $(this).data('container').hide(); 
                });
            };

        config.$items
            .each(createContainer)
            .click(showItem);
            
        return { showItemByIndex : showItemByIndex };
    })();
    
    myFeature.showItemByIndex(0);
});</programlisting>
      </example>
    </section>

    <section>
      <title>Classes and Class-Like Constructs</title>

      <para></para>
    </section>
  </section>
</chapter>
