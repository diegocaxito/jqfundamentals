<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>O básico de jQuery</title>

  <section>
    <title>$(document).ready()</title>

    <para>Você não pode manipular a página com segurançã até o documento estar
	"pronto" (ready). O jQuery detecta o estado de prontidão para você; o código
	incluido dentro de <code>$(document).ready()</code> somente irá rodar depois
	que a página estiver pronta para que o código JavaScript estiver pronto
	para executar</para>

    <example>
      <title>Um bloco $(document).ready()</title>

      <programlisting>$(document).ready(function() {
    console.log('pronto!');
});</programlisting>
    </example>

    <para>Há um atalho para <code>$(document).ready()</code> que você verá
	algumas vezes; entretando, eu recomendo usa-lo se você estiver escrevendo
	código que pessoas que não tem experiência com jQuery irá ver.</para>

    <example>
      <title>Atalho para $(document).ready()</title>

      <programlisting>$(function() {
    console.log('pronto!');
});</programlisting>
    </example>

    <para>Você ainda pode passar uma função nomeada para
    <code>$(document).ready()</code> ao invés de passar uma função
	anônima.</para>

    <example>
      <title>Passando uma função nomeada ao invês de uma anônima</title>

      <programlisting>function readyFn() {
    // código para executar quando o documento estiver pronto
}


$(document).ready(readyFn);</programlisting>
    </example>
  </section>

  <section>
    <title>Selecionando elementos</title>

    <para>O conceito mais básico do jQuery é "selecionar alguns elementos e
	fazer alguma coisa com eles." O jQuery suporta a maioria dos seletores
    CSS3 como alguns seletores não-padrão. Para uma referência completa de
	seletores, visite <link
    xlink:href="http://api.jquery.com/category/selectors/">http://api.jquery.com/category/selectors/</link>.</para>

    <para>A seguir, alguns exemplos de técnicas comuns de seleção.</para>

    <example>
      <title>Selecionando elementos por ID</title>

      <programlisting>$('#myId'); // lembre-se que os IDs devem ser únicos por página</programlisting>
    </example>

    <example>
      <title>Selecionando elementos pelo nome da classe</title>

      <programlisting>$('div.myClass'); // há um aumento de performance se você especificar o tipo de elemento.</programlisting>
    </example>

    <example>
      <title>Selecionando elementos por atributo</title>

      <para><programlisting>$('input[name=first_name]'); // cuidado, isto pode ser muito lento</programlisting></para>
    </example>

    <example>
      <title>Selecionando elementos através da composição de seletores CSS</title>

      <programlisting>$('#contents ul.people li');</programlisting>
    </example>

    <example>
      <title>Pseudo-seletores</title>

      <programlisting>$('a.external:first'); 
$('tr:odd');
$('#myForm :input');   // selecione todos os elementos input num formulário
$('div:visible');
$('div:gt(2)');        // todos exceto as três primeiras divs
$('div:animated');     // todas as divs com animação</programlisting>
    </example>

    <sidebar>
      <title>Escolhendo seletores</title>

      <para>Escolher bons seletores é uma forma de melhorar a performance
	  do seu JavaScript. Uma pequena especificidade - por exemplo, incluir
	  um elemento como <code>div</code> quando selecionar elementos pelo 
	  nome da classe - pode ir por um longo caminho. Geralmente, sempre que
	  você puder dar ao jQuery alguma dica sobre onde ele pode esperar encontrar
	  o que você estiver procurando, você deve dar. Por outro lado, muita 
	  especificidade pode não ser muito bom. Um seletor como <code>#myTable thead tr th.special</code> 
	  é um desperdício se um seletor como <code>#myTable th.special</code> lhe
	  dará o que você precisa.</para>

      <para>O jQuery oferece muitos seletores baseados em atributo, permitindo
	  que você selecione elementos baseados no conteúdo de atributos arbitrários
	  usando expressões regulares simplificadas.</para>

      <programlisting>// encontre todos elementos a &lt;a&gt;s em que o atributo
// rel termine com "thinger"
$("a[rel$='thinger']");</programlisting>

      <para>Se por um lado estes seletores podem ser bem úteis, eles também
	  podem ser extremamente lerdos - Uma vez eu escrevi um seletor baseado
	  em atributos que travou minha página por múltiplos segundos. Sempre que
	  possível, faça suas seleções usando IDs, nomes de classe e nomes de tags.</para>

      <para>Quer saber mais? <link 
      xlink:href="http://paulirish.com/perf">Paul Irish tem uma excelente
	  apresentação sobre melhorar a performance do JavaScript</link>, com
      vários slides focando especificamente em performace de seletores.</para>
    </sidebar>

    <section>
      <title>Minha seleção contém algum elemento?</title>

      <para>Uma vez que você fez uma seleção, você irá querer saber se há
	  algo para trabalhar com ela. Você talvez se sinta tentado a fazer algo
	  assim:</para>

      <programlisting>if ($('div.foo')) { ... }</programlisting>

      <para>Isso não irá funcionar. Quando você faz uma seleção usando <code>$()</code>,
      um objeto é sempre retornado, e objetos sempre são tratados como <code>true</code>. 
	  Mesmo se sua seleção não tiver nenhum elemento, o código dentro do <code>if</code>
	  vai executar do mesmo jeito.</para>
	  
      <para>Ao invés disso, você precisa testar a propriedade length da seleção,
	  que diz a você quantos elementos foram selecionados. Se a resposta for 0,
	  a propriedade length será interpretada como falso quando usada como um valor
	  booleano.</para>

      <example>
        <title>Testando se uma seleção contém elementos.</title>

        <programlisting>if ($('div.foo').length) { ... }</programlisting>
      </example>
    </section>

    <section>
      <title>Salvando seleções</title>

      <para>Toda vez que você faz uma seleção, um monte de código é executado,
	  e o jQuery não faz caching de seleções para você. Se você fez uma seleção
	  que você talvez precise fazer novamente, você deve salvar a seleção numa
	  variável ao invés de fazer a seleção várias vezes.</para>

      <example xml:id="jquery-basics.examples.storing-selections">
        <title>Armazenando seleções em variáveis</title>

        <programlisting>var $divs = $('div');</programlisting>
      </example>

      <note>
        <para>Em <xref linkend="jquery-basics.examples.storing-selections" />,
        o nome da variável começa com um sinal de dólar. Ao invés de outras
		linguagens, não há nada especial sobre o sinal de dólar em JavaScript
        -- é apenas outro caractere. Nós o usamos para indicar que a varíavel
		contém um objeto jQuery. Esta prática -- um tipo de <link
        xlink:href="http://en.wikipedia.org/wiki/Hungarian_notation">Notação
		Húngara</link> -- é meramente uma convenção, e não é obrigatória.</para>
      </note>

      <para>Uma vez que você armazenou sua seleção, você pode chamar os métodos
	  do jQuery na varoável que você armazenou, da mesma forma que você faria
	  na seleção original.</para>

      <note>
        <para>Uma seleção somente obtém os elementos que estão na página quando
		você faz a seleção. Se você adicionar elementos na página depois,
		você terá que repetir a seleção ou então adiciona-la à seleção armazenada
		na variável. Seleções armazenadas não atualizam automaticamente quando
		o DOM muda.</para>
      </note>
    </section>

    <section>
      <title>Refinando &amp; Filtrando Seleções</title>

      <para>Algumas vezes você tem uma seleção que contém mais do que você
	  quer; neste caso, você talvez queira refinar sua seleção. O jQuery
	  oferece vários métodos para você obter exatamente o que precisa.</para>

      <example>
        <title>Refinando seleções</title>

        <programlisting>$('div.foo').has('p');          // o elemento div.foo que contém &lt;p&gt;'s
$('h1').not('.bar');            // elementos h1 que não tem a classe bar
$('ul li').filter('.current');  // itens de listas não-ordenadas com a classe current
$('ul li').first();             // somente o primeiro item da lista não ordenada
$('ul li').eq(5);               // o sexto item da lista </programlisting>
      </example>
    </section>

    <section>
      <title>Seletores relacionados à formulários</title>

      <para>O jQuery oferece vários pseudo-seletores que lhe ajudam a encontrar
	  elementos nos seus formulários; estes são especialmente úteis porque pode
	  ser difícil distinguir entre elementos form baseados no seu estado ou tipo
	  usando seletores CSS padrão.</para>

      <variablelist>
        <varlistentry>
          <term>:button</term>

          <listitem>
            <para>Seleciona elementos do tipo <code>&lt;button&gt;</code>
            e elementos com <code>type="button"</code></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>:checkbox</term>

          <listitem>
            <para>Seleciona inputs com <code>type="checkbox"</code></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>:checked</term>

          <listitem>
            <para>Seleciona inputs selecionados</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>:disabled</term>

          <listitem>
            <para>Seleciona elementos de formulário desabilitados</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>:enabled</term>

          <listitem>
            <para>Seleciona elementos de formulário habilitados</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>:file</term>

          <listitem>
            <para>Seleciona inputs com <code>type="file"</code></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>:image</term>

          <listitem>
            <para>Seleciona inputs com <code>type="image"</code></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>:input</term>

          <listitem>
            <para>Seleciona <code>&lt;input&gt;</code>,
            <code>&lt;textarea&gt;</code>, e elementos <code>&lt;select&gt;</code>
			</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>:password</term>

          <listitem>
            <para>Selecionam inputs com <code>type="password"</code></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>:radio</term>

          <listitem>
            <para>Selecionam inputs com <code>type="radio"</code></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>:reset</term>

          <listitem>
            <para>Selecionam inputs com <code>type="reset"</code></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>:selected</term>

          <listitem>
            <para>Seleciona inputs que estão selecionados</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>:submit</term>

          <listitem>
            <para>Seleciona inputs com <code>type="submit"</code></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>:text</term>

          <listitem>
            <para>Seleciona inputs com <code>type="text"</code></para>
          </listitem>
        </varlistentry>
      </variablelist>

      <example>
        <title>Usando pseudo-seletores relacionados à formulários</title>

        <programlisting>$("#myForm :input'); // obtém todos os elementos que aceitam entrada de dados</programlisting>
      </example>
    </section>
  </section>

  <section>
    <title>Trabalhando com seleções</title>

    <para>Uma vez que você tem uma seleção, você pode chamar métodos nela.
	Métodos geralmente vêm em duas formas diferentes: getters e setters.
	Getters retornam uma propriedade do primeiro elemento selecionado; 
	setters ajustam (setam) uma propriedade em todos os elementos selecionados</para>

    <section>
      <title>Encadeamento</title>

      <para>Se você chamar um método numa seleção e este método retornar 
	  um objeto jQuery, você pode continuar a chamar métodos do jQuery
	  sem precisar pausar com um ponto-e-vírgula.</para>

      <example>
        <title>Encadeamento</title>

        <programlisting>$('#content').find('h3').eq(2).html('o novo texto do terceiro h3!');</programlisting>
      </example>

      <para>Se você estiver escrevendo uma cadeia que inclui vários passos,
	  você (e a pessoa que virá depois de você) talvez ache seu código mais
	  legível se você quebrar o código em várias linhas.</para>

      <example>
        <title>Formatando código encadeado</title>

        <programlisting>$('#content')
    .find('h3')
    .eq(2)
    .html('novo texto do terceiro h3!');</programlisting>
      </example>

      <para>Se você mudar sua seleção no meio de uma cadeia, o jQuery
	  provê o método <code>$.fn.end</code> para você voltar para sue seleção
	  original.</para>

      <example>
        <title>Restaurando sua seleção original usando
        <code>$.fn.end</code></title>

        <programlisting>$('#content')
    .find('h3')
    .eq(2)
        .html('new text for the third h3!')
    .end() // restaura a seleção para todos h3 em #context
    .eq(0)
        .html('novo texto para o primeiro h3!');</programlisting>
      </example>

      <note>
        <para>Encadeamento é um recurso extraordinariamente poderoso,
		e muitas bibliotecas adotaram-no desde que o jQuery o tornou
		popular. Entretando, deve ser usado com cuidado. Encadeamentos
		extensos podem deixar o código extremamente difícil de debugar
		ou modificar. Não há uma regra que diz o quão grande uma cadeia
		deve ser -- mas saiba que é fácil fazer bagunça</para>
      </note>
    </section>

    <section>
      <title>Getters &amp; Setters</title>

      <para>O jQuery “sobrecarrega” seus métodos, então o método usado para
	  setar um valor geralmente tem o mesmo nome do método usado para obter
	  um valor.
	  <termdef>Quando um método é usado para setar um valor, ele é chamado de
      <firstterm>setter</firstterm></termdef>. <termdef>Quando um método é 
	  usado para pegar (ou ler) um valor, ele é chamado de <firstterm>getter</firstterm></termdef>. 
	  Os setters afetam todos os elementos na seleção; getters obtém o valor
      requisitado somente do primeiro elemento na seleção.</para>

      <example>
        <title>O método <code>$.fn.html</code> usado como setter</title>

        <programlisting>$('h1').html('olá mundo');</programlisting>
      </example>

      <example>
        <title>O método html usado como getter</title>

        <para><programlisting>$('h1').html();</programlisting></para>
      </example>

      <para>Os setters retornam um objeto jQuery, permitindo que você continue
	  chamando métodos jQuery na sua seleção; getters retornam o que eles foram
	  pedidos para retornar, o que significa que você não pode continuar chamando
	  métodos jQuery no valor retornado pelo getter.</para>
    </section>
  </section>

  <section>
    <title>CSS, Styling, &amp; Dimensões</title>

    <para>O jQuery possui uma forma bem prática para pegar e setar 
	propriedades CSS dos elementos.</para>

    <note>
      <para>Propriedades CSS que normalmente incluem um hífen, precisam ser
	  acessadas no estilo <firstterm>camel case</firstterm> em JavaScript. 
	  Por exemplo, a propriedade CSS <code>font-size</code> é  expressada 
      como <code>fontSize</code> em JavaScript.</para>
    </note>

    <example>
      <title>Pegando propriedades CSS</title>

      <programlisting>$('h1').css('fontSize'); // retorna uma string, como "19px"</programlisting>
    </example>

    <example>
      <title>Setando propriedades CSS</title>

      <programlisting>$('h1').css('fontSize', '100px'); // setando uma propriedade individual
$('h1').css({ 'fontSize' : '100px', 'color' : 'red' }); // setando múltiplas propriedades</programlisting>
    </example>

	<remark>Note o estilo do argumento que usamos na segunda linha -- é um 
	objeto que contém múltiplas propriedades. Este é um jeito comum de passar
	múltiplos argumentos para uma função, e muitos setters do jQuery aceitam
	objetos para setar múltiplos valores de uma só vez.</remark>

    <section>
      <title>Usando classes do CSS para estilos</title>

      <para>Como um getter, o método <code>$.fn.css</code> é útil;
      Entretanto, ele geralmente deve ser evitado como um setter em
	  código de produção, pois você não quer informação de apresentação
	  no seu JavaScript. Ao invés disso, escreva regras CSS para classes
	  que descrevam os vários estados visuais, e então mude a classe no
	  elemento que você quer afetar.</para>

      <example>
        <title>Trabalhando com classes</title>

        <programlisting>var $h1 = $('h1');

$h1.addClass('big');
$h1.removeClass('big');
$h1.toggleClass('big');

if ($h1.hasClass('big')) { ... }</programlisting>
      </example>

      <para>Classes também podem ser úteis para armazenar informações de estado
	  de um elemento, como indicar se um elemento está selecionado, por exemplo.</para>
    </section>

    <section>
      <title>Dimensões</title>

      <para>O jQuery oferece uma variedade de médotos para obter e modificar
	  informações sobre dimensões e posições de um elemento.</para>

      <para>O código em <xref linkend="jquery-basics.examples.dimensions" />
      é somente uma introdução muito curta sobre a funcionalidade de dimensões
	  do jQuery; para detalhes completos sobre a funcionalidade de dimensões
	  no jQuery, visite <link
      xlink:href="http://api.jquery.com/category/dimensions/">http://api.jquery.com/category/dimensions/</link>.</para>

      <example xml:id="jquery-basics.examples.dimensions">
        <title>Métodos básicos de dimensões</title>

        <para><programlisting>$('h1').width('50px');   // seta a largura de todos os elementos h1
$('h1').width();         // obtém a largura do primeiro h1

$('h1').height('50px');  // seta a altura de todos os elementos h1
$('h1').height();        // obtém a altura do primeiro h1

$('h1').position();      // retorna um objeto contendo informações
                         // sobre a posição do primeiro h1 relativo
                         // à seu pai</programlisting></para>
      </example>
    </section>
  </section>

  <section>
    <title>Atributos</title>

    <para>Atributos de elementos podem conter informações úteis para sua
    aplicação, então é importante saber como seta-los e obte-los.</para>

    <para>O método <code>$.fn.attr</code> atua como getter e setter
    . Assim como os métodos <code>$.fn.css</code> , <code>$.fn.attr</code>
    atuando como um setter, podem aceitar tanto uma chave e um valor ou
	um objeto contendo um ou mais pares chave/valor.</para>

    <example>
      <title>Setting attributes</title>

      <programlisting>$('a').attr('href', 'todosMeusHrefsSaoOMesmoAgora.html');
$('a').attr({ 
    'title' : 'todos os títulos são os mesmos também!', 
    'href' : 'algoNovo.html' 
});</programlisting>
    </example>

    <remark>Agora, nós quebramos o objeto em múltiplas linhas. Lembre-se,
	espaços não importam em JavaScript, então você deve se sentir livre
	para usa-lo do jeito que quiser para fazer seu código ficar mais legível!
	Depois, você pode usar uma ferramenta de minificação para remover espaços
	desnecessários para seu código de produção.</remark>

    <example>
      <title>Getting attributes</title>

      <programlisting>$('a').attr('href');  // returns the href for the first a element in the document</programlisting>
    </example>
  </section>

  <section>
    <title>Travessia</title>

    <para>Uma vez que você tem uma seleção do jQuery, você pode encontrar
    outros elementos usando sua seleção como ponto de início.</para>

    <para>Para documentação completa dos métodos de travessia do jQuery,
    visite <link
    xlink:href="http://api.jquery.com/category/traversing/">http://api.jquery.com/category/traversing/</link>.</para>

    <note>
      <para>Seja cuidadoso com travessias de longas distâncias nos seus
      documentos -- travessias complexas torna imperativo que a estrutura
      do seu documento continua a mesma, alguma coisa que dificulta a 
      garantia mesmo se você é o responsável por criar toda a aplicação
      do servidor ao cliente. Travessias de um ou dois passos é legal,
      mas geralmente você irá querer evitar travessias que levem você
      de um container para outro.</para> 
      <!-- TODO: essa parte ficou meio estranha. procurar uma melhor tradução -->
    </note>

    <example>
      <title>Movendo pelo DOM usando métodos de travessia.</title>

      <programlisting>$('h1').next('p');
$('div:visible').parent();
$('input[name=first_name]').closest('form');
$('#myList').children();
$('li.selected').siblings();</programlisting>
    </example>

    <para>Você também pode iterar sobre uma seleção usando <code>$.fn.each</code>. 
    Este método itera sobre todos os elementos numa seleção e executa uma funlção
    para cada um. A função recebe como argumento um índice com o elemento atual 
    e com o próprio elemento DOM. Dentro da função, o elemento DOM também está
    disponível como  <code>this</code> por padrão.</para>

    <example>
      <title>Iterando sobre uma seleção</title>

      <programlisting>$('#myList li').each(function(idx, el) {
    console.log(
        'O elemento ' + idx + 
        'tem o seguinte html: ' +
        $(el).html()
    );
});</programlisting>
    </example>
  </section>

  <section>
    <title>Manipulando elementos</title>
    <para>Uma vez que você fez uma seleção, a diversão começa. Você pode mudar,
    mover, remover e clonar elementos. Você ainda pode criar novos elementos 
    através uma sintaxe simples</para>

    <para>Para uma referência completa dos métodos de manipulação do jQuery,
    visite 
    <link
    xlink:href="http://api.jquery.com/category/manipulation/">http://api.jquery.com/category/manipulation/</link>.</para>

    <section>
      <title>Obtendo e setando informações sobre elementos</title>

      <para>Há um certo número de formas que você pode mudar um elemento 
      existente. Dentre as tarefas mais comuns que você irá fazer é mudar
      o inner HTML ou o atributo de um elemento. O jQuery oferece métodos
      simples e cross-navegador para estes tipos de manipulação. Você ainda
      pode obter informações sobre elementos usando muitos dos mesmos métodos
      nas suas formas de getter. Nós veremos exemplos destes métodos durante
      esta seção, mas especificamente, aqui vão alguns poucos métodos que
      você pode usar para obter e setar informação sobre elementos.
      </para>
      
      <note>
        <para>Mudar coisas em elementos é trivial, mas lembre-se que a mudança
        irá afetar <emphasis>todos</emphasis> os elementos na seleção, então 
        se você quiser mudar um elemento, esteja certo de especifica-lo em sua
        seleção antes de chamar o método setter</para>
        <para>Changing things about elements is trivial, but remember that the
        change will affect <emphasis>all</emphasis> elements in the selection,
        so if you just want to change one element, be sure to specify that in
        your selection before calling a setter method.</para>
      </note>

      <note>
        <para>Quando os métodos atuam como getters, eles geralmente só 
        trabalham no primeiro elemento da seleção e eles não retornam um
        objeto jQuery, portanto você não pode encadear métodos adicionais
        a eles. Uma exceção notável é <code>$.fn.text</code>; como mencionado
        acima, ele obtém o texto para todos os elementos da seleção</para>
      </note>

      <variablelist>
        <varlistentry>
          <term>$.fn.html</term>

          <listitem>
            <para>Obter ou setar o conteúdo html.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>$.fn.text</term>

          <listitem>
            <para>Obter ou setar os conteúdos de texto; HTML será removido.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>$.fn.attr</term>

          <listitem>
            <para>Obtém ou seta um valor doatributo provido.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>$.fn.width</term>

          <listitem>
            <para>Obtém ou seta a largura em pixels do primeiro elemento na
            seleção como um inteiro.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>$.fn.height</term>

          <listitem>
            <para>Obtem ou seta a altura em pixels do primeiro elemento na 
            seleção.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>$.fn.position</term>

          <listitem>
            <para>Obtém um objeto com a informação de posição do primeiro
            elemento na seleção, relativo a seu primeiro ancestral (pai).
            <emphasis>Este é somente um getter.</emphasis></para>
            
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>$.fn.val</term>

          <listitem>
            <para>Obtém ou seta o valor de elementos de formulários.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <example>
        <title>Mudando o HTML de um elemento.</title>

        <programlisting>$('#myDiv p:first')
    .html('New &lt;strong&gt;first&lt;/strong&gt; paragraph!');</programlisting>
      </example>
    </section>

    <section>
      <title>Movendo, copiando e removendo elementos. </title>

      <para>Há uma variedade de formas de mover elementos pelo DOM;
      geralmente, há duas formas:</para>

      <itemizedlist>
        <listitem>
          <para>Coloque o(s) elemento(s) selecionado(s) relativo
          à outro elemento</para>
        </listitem>

        <listitem>
          <para>Coloque um elemento relativo ao(s) elemento(s) 
          selecionado(s)</para>
        </listitem>
      </itemizedlist>

      <para>Por exemplo, o jQueru provê <code>$.fn.insertAfter</code> e
      <code>$.fn.after</code>. O método <code>$.fn.insertAfter</code> coloca
      o(s) elemento(s) selecionado(s) depois do elemento que você passou 
      como argumento; o método <code>$.fn.after</code> coloca o elemento 
      passado como argumento depois do elemento selecionado.Vários outros 
      métodos seguem este padrão: <code>$.fn.insertBefore</code> e
      <code>$.fn.before</code>; <code>$.fn.appendTo</code> e
      <code>$.fn.append</code>; e <code>$.fn.prependTo</code> e
      <code>$.fn.prepend</code>.</para>
      
      <para>O método que faz mais sentido pra você depende de quais elementos
      você já selecionou e quais você precisa armazenar uma referência para os 
      elementos que você está adicionando na página. Se você precisar de armazenar
      uma referência, você sempre irá querer fazer pela primeira forma -- colocando
      os elementos selecionados relativos à outro elemento -- de forma que ele
      retorne o(s) elemento(s) que você está colocando. Neste caso, os métodos
      <code>$.fn.insertAfter</code>, <code>$.fn.insertBefore</code>,
      <code>$.fn.appendTo</code>, e <code>$.fn.prependTo</code> serão suas 
      ferramentas para escolha.</para>

      <example>
        <title>Movendo elementos usando outras formas</title>

        <programlisting>// faz o primeiro item da lista se tornar o último
var $li = $('#myList li:first').appendTo('#myList');

// outra forma de resolver o mesmo problema
$('#myList').append($('#myList li:first'));

// perceba que não tem como acessar o item
// da lista que movemos, pois ele retorna 
// a própria lista
</programlisting>
      </example>

      <section>
        <title>Clonando elementos</title>

        <para>Quando você usa métodos como $.fn.appendTo, você está movendo o
        elemento; porém,algumas vezes você irá querer fazer uma cópia do 
        elemento. Neste caso, você precisará usar $.fn.clone first.</para>

        <example>
          <title>Fazendo uma cópia de um elemento</title>

          <programlisting>// copia o primeiro item da lista para o fim
$('#myList li:first').clone().appendTo('#myList');</programlisting>
        </example>

        <note>
          <para>Se você precisa copiar dados e eventos relacionados, esteja
          certo de passar <code>true</code> como um argumento para <code>$.fn.clone</code>.</para>
        </note>
      </section>

      <section>
        <title>Removendo elementos</title>

        <para>Há duas formas de remover elementos da página:
        <code>$.fn.remove</code> e <code>$.fn.detach</code>. Você irá 
        usar <code>$.fn.remove</code> quandp você quer remover a
        seleção permanentemente da página; enquanto o método retorna
        os elementos removidos, estes elementos não terão seus eventos
        e dados associados a ele se você retorna-los à página.</para>

        <para>Se você precisa que os dados e eventos persistam, você irá 
        isar <code>$.fn.detach</code> . Da mesma forma que <code>$.fn.remove</code>,
        ele retorna uma seleção, mas também mantém os dados e os eventos
        associados com a seleção para que você possa restaurar a seleção
        para a página no futuro.</para>

        <note>
          <para>O método <code>$.fn.detach</code> é extremamente útil se você
          estiver fazendo uma manipulação pesada à um elemento. Neste caso,
          é bom aplicar um <code>$.fn.detach</code> no elemento da página,
          trabalhar no seu próprio código, e então restaura-lo à página quando
          você terminar. Isto evita que você faça "toques ao DOM" caros enquanto
          mantém os dados e eventos do elemento.</para>
        </note>

        <para>Se você quer deixar um elemento na página mas simplesmente quer
        remover seu conteúdo, você pode usar <code>$.fn.empty</code> para retirar
        o innerHTML do elemento.</para>
      </section>
    </section>

    <section>
      <title>Criando novos elementos</title>
          <para>O jQuery oferece uma forma elegante e trivial para criar novos
          elementos usando o mesmo método <code>$()</code> que você usava para
          seleções.</para>
      <example>
        <title>Criando novos elementos</title>

        <programlisting>$('&lt;p&gt;Este é um novo parágrafo&lt;/p&gt;');
$('&lt;li class="new"&gt;novo item de lista&lt;/li&gt;');</programlisting>
      </example>

      <example>
        <title>Criando um novo elemento com um objeto atributo</title>

        <programlisting>$('&lt;a/&gt;', { 
    html : 'Este é um link &lt;strong&gt;new&lt;/strong&gt;',
    'class' : 'new',
    href : 'foo.html'
});</programlisting>
      </example>

      <remark>Perceba que no objeto de atributos nós incluimos como segundo
      argumento a propriedade classe entre aspas, enquanto as propriedades
      text e href não. Geralmente, nomes de propriedades não precisam estar
      entre aspas a não ser que elas sejam palavras reservadas (como a 
      classe neste caso)</remark>
      
      <para>Quando você cria um novo elemento, ele não é adicionado imediatamente
      à página. Há várias formas de adicionar um elemento à página uma vez que ele
      esteja criado.</para>

      <example>
        <title>Inserindo um novo elemento na página</title>

        <programlisting>var $myNewElement = $('&lt;p&gt;New element&lt;/p&gt;');
$myNewElement.appendTo('#content');

$myNewElement.insertAfter('ul:last'); // isto irá remover p de #content!
$('ul').last().after($myNewElement.clone());  // clona o p, portanto temos 2 agora</programlisting>
      </example>

      <remark>Estritamente falando, você não precisa armazenar o elemento
      criado numa variável -- você pode simplesmente chamar o método para 
      adiciona-lo diretamente depois do <code>$()</code>. Entretanto, a maior
      parte do tempo você precisará de uma referência ao elemento que você
      adicionou para que você não o selecione depois.</remark>

      <para>Você ainda pode criar um elemento ao mesmo tempo que você
      o adiciona à página, mas note que neste caso você não obtém a 
      referência do novo objeto criado.</para>

      <example>
        <title>Criando e adicionando um elemento à página ao
        mesmo tempo</title>

        <programlisting>$('ul').append('&lt;li&gt;list item&lt;/li&gt;');</programlisting>
      </example>

      <note>
        <para>A sintaxe para adicionar novos elementos à página é tão fácil
        que é tentador esquecer que há um enorme custo de performance por 
        adicionar ao DOM repetidas vezes. Se você está adicionando muitos 
        elementos ao mesmo container, você irá concatenar todo html numa 
        única string e então adicionar a string ao container ao invés de
        ir adicionando um elemento de cada vez. Você pode usar um array
        para colocar todas os pedaços juntos e então aplicar um <code>join</code>
        nele em uma única string para adicionar ao container.</para>

        <programlisting>var myItems = [], $myList = $('#myList');

for (var i=0; i&lt;100; i++) {
    myItems.push('&lt;li&gt;item ' + i + '&lt;/li&gt;');
}

$myList.append(myItems.join(''));</programlisting>
      </note>
    </section>

    <section>
      <title>Manipulando atributos</title>

      <para>Os recursos de  manipulação de atributos do jQuery são muitos.
      Mudanças básicas são simples, mas o método $.fn.attr também permite
      manipulações mais complexas.</para>

      <example>
        <title>Manipulando um único atributo</title>

        <programlisting>$('#myDiv a:first').attr('href', 'newDestination.html');</programlisting>
      </example>

      <example>
        <title>Manipulando múltiplos atributos</title>

        <programlisting>$('#myDiv a:first').attr({
    href : 'newDestination.html',
    rel : 'super-special'
});</programlisting>
      </example>

      <example>
        <title>Usando uma função para determinar um novo valor de atributo</title>

        <programlisting>$('#myDiv a:first').attr({
    rel : 'super-special',
    href : function() { 
        return '/new/' + $(this).attr('href');
    }
});

$('#myDiv a:first').attr('href', function() {
    return '/new/' + $(this).attr('href');
});</programlisting>
      </example>
    </section>
  </section>

  <section>
    <title>Exercícios</title>

    <xi:include href="exercises/selecting.xml" xpointer="element(/1)" />

    <xi:include href="exercises/traversing.xml" xpointer="element(/1)" />

    <xi:include href="exercises/manipulating.xml" xpointer="element(/1)" />
  </section>
</chapter>
